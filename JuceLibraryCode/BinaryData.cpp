/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== Cholesky ==================
static const unsigned char temp_binary_data_0[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_CHOLESKY_MODULE_H\n"
"#define EIGEN_CHOLESKY_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"#include \"Jacobi\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \\defgroup Cholesky_Module Cholesky module\n"
"  *\n"
"  *\n"
"  *\n"
"  * This module provides two variants of the Cholesky decomposition for selfadjoint (hermitian) matrices.\n"
"  * Those decompositions are also accessible via the following methods:\n"
"  *  - MatrixBase::llt()\n"
"  *  - MatrixBase::ldlt()\n"
"  *  - SelfAdjointView::llt()\n"
"  *  - SelfAdjointView::ldlt()\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/Cholesky>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/Cholesky/LLT.h\"\n"
"#include \"src/Cholesky/LDLT.h\"\n"
"#ifdef EIGEN_USE_LAPACKE\n"
"#ifdef EIGEN_USE_MKL\n"
"#include \"mkl_lapacke.h\"\n"
"#else\n"
"#include \"src/misc/lapacke.h\"\n"
"#endif\n"
"#include \"src/Cholesky/LLT_LAPACKE.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_CHOLESKY_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* Cholesky = (const char*) temp_binary_data_0;

//================== CholmodSupport ==================
static const unsigned char temp_binary_data_1[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_CHOLMODSUPPORT_MODULE_H\n"
"#define EIGEN_CHOLMODSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"extern \"C\" {\n"
"  #include <cholmod.h>\n"
"}\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup CholmodSupport_Module CholmodSupport module\n"
"  *\n"
"  * This module provides an interface to the Cholmod library which is part of the <a href=\"http://www.suitesparse.com\">suitesparse</a> package.\n"
"  * It provides the two following main factorization classes:\n"
"  * - class CholmodSupernodalLLT: a supernodal LLT Cholesky factorization.\n"
"  * - class CholmodDecomposiiton: a general L(D)LT Cholesky factorization with automatic or explicit runtime selection of the underlying factorization method (supernodal or simplicial).\n"
"  *\n"
"  * For the sake of completeness, this module also propose the two following classes:\n"
"  * - class CholmodSimplicialLLT\n"
"  * - class CholmodSimplicialLDLT\n"
"  * Note that these classes does not bring any particular advantage compared to the built-in\n"
"  * SimplicialLLT and SimplicialLDLT factorization classes.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/CholmodSupport>\n"
"  * \\endcode\n"
"  *\n"
"  * In order to use this module, the cholmod headers must be accessible from the include paths, and your binary must be linked to the cholmod library and its dependencies.\n"
"  * The dependencies depend on how cholmod has been compiled.\n"
"  * For a cmake based project, you can use our FindCholmod.cmake module to help you in this task.\n"
"  *\n"
"  */\n"
"\n"
"#include \"src/CholmodSupport/CholmodSupport.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_CHOLMODSUPPORT_MODULE_H\n"
"\n";

const char* CholmodSupport = (const char*) temp_binary_data_1;

//================== CMakeLists.txt ==================
static const unsigned char temp_binary_data_2[] =
"include(RegexUtils)\n"
"test_escape_string_as_regex()\n"
"\n"
"file(GLOB Eigen_directory_files \"*\")\n"
"\n"
"escape_string_as_regex(ESCAPED_CMAKE_CURRENT_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n"
"\n"
"foreach(f ${Eigen_directory_files})\n"
"  if(NOT f MATCHES \"\\\\.txt\" AND NOT f MATCHES \"${ESCAPED_CMAKE_CURRENT_SOURCE_DIR}/[.].+\" AND NOT f MATCHES \"${ESCAPED_CMAKE_CURRENT_SOURCE_DIR}/src\")\n"
"    list(APPEND Eigen_directory_files_to_install ${f})\n"
"  endif()\n"
"endforeach(f ${Eigen_directory_files})\n"
"\n"
"install(FILES\n"
"  ${Eigen_directory_files_to_install}\n"
"  DESTINATION ${INCLUDE_INSTALL_DIR}/Eigen COMPONENT Devel\n"
"  )\n"
"\n"
"install(DIRECTORY src DESTINATION ${INCLUDE_INSTALL_DIR}/Eigen COMPONENT Devel FILES_MATCHING PATTERN \"*.h\")\n";

const char* CMakeLists_txt = (const char*) temp_binary_data_2;

//================== Core ==================
static const unsigned char temp_binary_data_3[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>\n"
"// Copyright (C) 2007-2011 Benoit Jacob <jacob.benoit.1@gmail.com>\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_CORE_H\n"
"#define EIGEN_CORE_H\n"
"\n"
"// first thing Eigen does: stop the compiler from committing suicide\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#if defined(__CUDACC__) && !defined(EIGEN_NO_CUDA)\n"
"  #define EIGEN_CUDACC __CUDACC__\n"
"#endif\n"
"\n"
"#if defined(__CUDA_ARCH__) && !defined(EIGEN_NO_CUDA)\n"
"  #define EIGEN_CUDA_ARCH __CUDA_ARCH__\n"
"#endif\n"
"\n"
"#if defined(__CUDACC_VER_MAJOR__) && (__CUDACC_VER_MAJOR__ >= 9)\n"
"#define EIGEN_CUDACC_VER  ((__CUDACC_VER_MAJOR__ * 10000) + (__CUDACC_VER_MINOR__ * 100))\n"
"#elif defined(__CUDACC_VER__)\n"
"#define EIGEN_CUDACC_VER __CUDACC_VER__\n"
"#else\n"
"#define EIGEN_CUDACC_VER 0\n"
"#endif\n"
"\n"
"// Handle NVCC/CUDA/SYCL\n"
"#if defined(__CUDACC__) || defined(__SYCL_DEVICE_ONLY__)\n"
"  // Do not try asserts on CUDA and SYCL!\n"
"  #ifndef EIGEN_NO_DEBUG\n"
"  #define EIGEN_NO_DEBUG\n"
"  #endif\n"
"\n"
"  #ifdef EIGEN_INTERNAL_DEBUGGING\n"
"  #undef EIGEN_INTERNAL_DEBUGGING\n"
"  #endif\n"
"\n"
"  #ifdef EIGEN_EXCEPTIONS\n"
"  #undef EIGEN_EXCEPTIONS\n"
"  #endif\n"
"\n"
"  // All functions callable from CUDA code must be qualified with __device__\n"
"  #ifdef __CUDACC__\n"
"    // Do not try to vectorize on CUDA and SYCL!\n"
"    #ifndef EIGEN_DONT_VECTORIZE\n"
"    #define EIGEN_DONT_VECTORIZE\n"
"    #endif\n"
"\n"
"    #define EIGEN_DEVICE_FUNC __host__ __device__\n"
"    // We need cuda_runtime.h to ensure that that EIGEN_USING_STD_MATH macro\n"
"    // works properly on the device side\n"
"    #include <cuda_runtime.h>\n"
"  #else\n"
"    #define EIGEN_DEVICE_FUNC\n"
"  #endif\n"
"\n"
"#else\n"
"  #define EIGEN_DEVICE_FUNC\n"
"\n"
"#endif\n"
"\n"
"// When compiling CUDA device code with NVCC, pull in math functions from the\n"
"// global namespace.  In host mode, and when device doee with clang, use the\n"
"// std versions.\n"
"#if defined(__CUDA_ARCH__) && defined(__NVCC__)\n"
"  #define EIGEN_USING_STD_MATH(FUNC) using ::FUNC;\n"
"#else\n"
"  #define EIGEN_USING_STD_MATH(FUNC) using std::FUNC;\n"
"#endif\n"
"\n"
"#if (defined(_CPPUNWIND) || defined(__EXCEPTIONS)) && !defined(__CUDA_ARCH__) && !defined(EIGEN_EXCEPTIONS) && !defined(EIGEN_USE_SYCL)\n"
"  #define EIGEN_EXCEPTIONS\n"
"#endif\n"
"\n"
"#ifdef EIGEN_EXCEPTIONS\n"
"  #include <new>\n"
"#endif\n"
"\n"
"// then include this file where all our macros are defined. It's really important to do it first because\n"
"// it's where we do all the alignment settings (platform detection and honoring the user's will if he\n"
"// defined e.g. EIGEN_DONT_ALIGN) so it needs to be done before we do anything with vectorization.\n"
"#include \"src/Core/util/Macros.h\"\n"
"\n"
"// Disable the ipa-cp-clone optimization flag with MinGW 6.x or newer (enabled by default with -O3)\n"
"// See http://eigen.tuxfamily.org/bz/show_bug.cgi?id=556 for details.\n"
"#if EIGEN_COMP_MINGW && EIGEN_GNUC_AT_LEAST(4,6)\n"
"  #pragma GCC optimize (\"-fno-ipa-cp-clone\")\n"
"#endif\n"
"\n"
"#include <complex>\n"
"\n"
"// this include file manages BLAS and MKL related macros\n"
"// and inclusion of their respective header files\n"
"#include \"src/Core/util/MKL_support.h\"\n"
"\n"
"// if alignment is disabled, then disable vectorization. Note: EIGEN_MAX_ALIGN_BYTES is the proper check, it takes into\n"
"// account both the user's will (EIGEN_MAX_ALIGN_BYTES,EIGEN_DONT_ALIGN) and our own platform checks\n"
"#if EIGEN_MAX_ALIGN_BYTES==0\n"
"  #ifndef EIGEN_DONT_VECTORIZE\n"
"    #define EIGEN_DONT_VECTORIZE\n"
"  #endif\n"
"#endif\n"
"\n"
"#if EIGEN_COMP_MSVC\n"
"  #include <malloc.h> // for _aligned_malloc -- need it regardless of whether vectorization is enabled\n"
"  #if (EIGEN_COMP_MSVC >= 1500) // 2008 or later\n"
"    // Remember that usage of defined() in a #define is undefined by the standard.\n"
"    // a user reported that in 64-bit mode, MSVC doesn't care to define _M_IX86_FP.\n"
"    #if (defined(_M_IX86_FP) && (_M_IX86_FP >= 2)) || EIGEN_ARCH_x86_64\n"
"      #define EIGEN_SSE2_ON_MSVC_2008_OR_LATER\n"
"    #endif\n"
"  #endif\n"
"#else\n"
"  // Remember that usage of defined() in a #define is undefined by the standard\n"
"  #if (defined __SSE2__) && ( (!EIGEN_COMP_GNUC) || EIGEN_COMP_ICC || EIGEN_GNUC_AT_LEAST(4,2) )\n"
"    #define EIGEN_SSE2_ON_NON_MSVC_BUT_NOT_OLD_GCC\n"
"  #endif\n"
"#endif\n"
"\n"
"#ifndef EIGEN_DONT_VECTORIZE\n"
"\n"
"  #if defined (EIGEN_SSE2_ON_NON_MSVC_BUT_NOT_OLD_GCC) || defined(EIGEN_SSE2_ON_MSVC_2008_OR_LATER)\n"
"\n"
"    // Defines symbols for compile-time detection of which instructions are\n"
"    // used.\n"
"    // EIGEN_VECTORIZE_YY is defined if and only if the instruction set YY is used\n"
"    #define EIGEN_VECTORIZE\n"
"    #define EIGEN_VECTORIZE_SSE\n"
"    #define EIGEN_VECTORIZE_SSE2\n"
"\n"
"    // Detect sse3/ssse3/sse4:\n"
"    // gcc and icc defines __SSE3__, ...\n"
"    // there is no way to know about this on msvc. You can define EIGEN_VECTORIZE_SSE* if you\n"
"    // want to force the use of those instructions with msvc.\n"
"    #ifdef __SSE3__\n"
"      #define EIGEN_VECTORIZE_SSE3\n"
"    #endif\n"
"    #ifdef __SSSE3__\n"
"      #define EIGEN_VECTORIZE_SSSE3\n"
"    #endif\n"
"    #ifdef __SSE4_1__\n"
"      #define EIGEN_VECTORIZE_SSE4_1\n"
"    #endif\n"
"    #ifdef __SSE4_2__\n"
"      #define EIGEN_VECTORIZE_SSE4_2\n"
"    #endif\n"
"    #ifdef __AVX__\n"
"      #define EIGEN_VECTORIZE_AVX\n"
"      #define EIGEN_VECTORIZE_SSE3\n"
"      #define EIGEN_VECTORIZE_SSSE3\n"
"      #define EIGEN_VECTORIZE_SSE4_1\n"
"      #define EIGEN_VECTORIZE_SSE4_2\n"
"    #endif\n"
"    #ifdef __AVX2__\n"
"      #define EIGEN_VECTORIZE_AVX2\n"
"    #endif\n"
"    #ifdef __FMA__\n"
"      #define EIGEN_VECTORIZE_FMA\n"
"    #endif\n"
"    #if defined(__AVX512F__) && defined(EIGEN_ENABLE_AVX512)\n"
"      #define EIGEN_VECTORIZE_AVX512\n"
"      #define EIGEN_VECTORIZE_AVX2\n"
"      #define EIGEN_VECTORIZE_AVX\n"
"      #define EIGEN_VECTORIZE_FMA\n"
"      #ifdef __AVX512DQ__\n"
"        #define EIGEN_VECTORIZE_AVX512DQ\n"
"      #endif\n"
"      #ifdef __AVX512ER__\n"
"        #define EIGEN_VECTORIZE_AVX512ER\n"
"      #endif\n"
"    #endif\n"
"\n"
"    // include files\n"
"\n"
"    // This extern \"C\" works around a MINGW-w64 compilation issue\n"
"    // https://sourceforge.net/tracker/index.php?func=detail&aid=3018394&group_id=202880&atid=983354\n"
"    // In essence, intrin.h is included by windows.h and also declares intrinsics (just as emmintrin.h etc. below do).\n"
"    // However, intrin.h uses an extern \"C\" declaration, and g++ thus complains of duplicate declarations\n"
"    // with conflicting linkage.  The linkage for intrinsics doesn't matter, but at that stage the compiler doesn't know;\n"
"    // so, to avoid compile errors when windows.h is included after Eigen/Core, ensure intrinsics are extern \"C\" here too.\n"
"    // notice that since these are C headers, the extern \"C\" is theoretically needed anyways.\n"
"    extern \"C\" {\n"
"      // In theory we should only include immintrin.h and not the other *mmintrin.h header files directly.\n"
"      // Doing so triggers some issues with ICC. However old gcc versions seems to not have this file, thus:\n"
"      #if EIGEN_COMP_ICC >= 1110\n"
"        #include <immintrin.h>\n"
"      #else\n"
"        #include <mmintrin.h>\n"
"        #include <emmintrin.h>\n"
"        #include <xmmintrin.h>\n"
"        #ifdef  EIGEN_VECTORIZE_SSE3\n"
"        #include <pmmintrin.h>\n"
"        #endif\n"
"        #ifdef EIGEN_VECTORIZE_SSSE3\n"
"        #include <tmmintrin.h>\n"
"        #endif\n"
"        #ifdef EIGEN_VECTORIZE_SSE4_1\n"
"        #include <smmintrin.h>\n"
"        #endif\n"
"        #ifdef EIGEN_VECTORIZE_SSE4_2\n"
"        #include <nmmintrin.h>\n"
"        #endif\n"
"        #if defined(EIGEN_VECTORIZE_AVX) || defined(EIGEN_VECTORIZE_AVX512)\n"
"        #include <immintrin.h>\n"
"        #endif\n"
"      #endif\n"
"    } // end extern \"C\"\n"
"  #elif defined __VSX__\n"
"    #define EIGEN_VECTORIZE\n"
"    #define EIGEN_VECTORIZE_VSX\n"
"    #include <altivec.h>\n"
"    // We need to #undef all these ugly tokens defined in <altivec.h>\n"
"    // => use __vector instead of vector\n"
"    #undef bool\n"
"    #undef vector\n"
"    #undef pixel\n"
"  #elif defined __ALTIVEC__\n"
"    #define EIGEN_VECTORIZE\n"
"    #define EIGEN_VECTORIZE_ALTIVEC\n"
"    #include <altivec.h>\n"
"    // We need to #undef all these ugly tokens defined in <altivec.h>\n"
"    // => use __vector instead of vector\n"
"    #undef bool\n"
"    #undef vector\n"
"    #undef pixel\n"
"  #elif (defined  __ARM_NEON) || (defined __ARM_NEON__)\n"
"    #define EIGEN_VECTORIZE\n"
"    #define EIGEN_VECTORIZE_NEON\n"
"    #include <arm_neon.h>\n"
"  #elif (defined __s390x__ && defined __VEC__)\n"
"    #define EIGEN_VECTORIZE\n"
"    #define EIGEN_VECTORIZE_ZVECTOR\n"
"    #include <vecintrin.h>\n"
"  #endif\n"
"#endif\n"
"\n"
"#if defined(__F16C__) && !defined(EIGEN_COMP_CLANG)\n"
"  // We can use the optimized fp16 to float and float to fp16 conversion routines\n"
"  #define EIGEN_HAS_FP16_C\n"
"#endif\n"
"\n"
"#if defined __CUDACC__\n"
"  #define EIGEN_VECTORIZE_CUDA\n"
"  #include <vector_types.h>\n"
"  #if EIGEN_CUDACC_VER >= 70500\n"
"    #define EIGEN_HAS_CUDA_FP16\n"
"  #endif\n"
"#endif\n"
"\n"
"#if defined EIGEN_HAS_CUDA_FP16\n"
"  #include <host_defines.h>\n"
"  #include <cuda_fp16.h>\n"
"#endif\n"
"\n"
"#if (defined _OPENMP) && (!defined EIGEN_DONT_PARALLELIZE)\n"
"  #define EIGEN_HAS_OPENMP\n"
"#endif\n"
"\n"
"#ifdef EIGEN_HAS_OPENMP\n"
"#include <omp.h>\n"
"#endif\n"
"\n"
"// MSVC for windows mobile does not have the errno.h file\n"
"#if !(EIGEN_COMP_MSVC && EIGEN_OS_WINCE) && !EIGEN_COMP_ARM\n"
"#define EIGEN_HAS_ERRNO\n"
"#endif\n"
"\n"
"#ifdef EIGEN_HAS_ERRNO\n"
"#include <cerrno>\n"
"#endif\n"
"#include <cstddef>\n"
"#include <cstdlib>\n"
"#include <cmath>\n"
"#include <cassert>\n"
"#include <functional>\n"
"#include <iosfwd>\n"
"#include <cstring>\n"
"#include <string>\n"
"#include <limits>\n"
"#include <climits> // for CHAR_BIT\n"
"// for min/max:\n"
"#include <algorithm>\n"
"\n"
"// for std::is_nothrow_move_assignable\n"
"#ifdef EIGEN_INCLUDE_TYPE_TRAITS\n"
"#include <type_traits>\n"
"#endif\n"
"\n"
"// for outputting debug info\n"
"#ifdef EIGEN_DEBUG_ASSIGN\n"
"#include <iostream>\n"
"#endif\n"
"\n"
"// required for __cpuid, needs to be included after cmath\n"
"#if EIGEN_COMP_MSVC && EIGEN_ARCH_i386_OR_x86_64 && !EIGEN_OS_WINCE\n"
"  #include <intrin.h>\n"
"#endif\n"
"\n"
"/** \\brief Namespace containing all symbols from the %Eigen library. */\n"
"namespace Eigen {\n"
"\n"
"inline static const char *SimdInstructionSetsInUse(void) {\n"
"#if defined(EIGEN_VECTORIZE_AVX512)\n"
"  return \"AVX512, FMA, AVX2, AVX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2\";\n"
"#elif defined(EIGEN_VECTORIZE_AVX)\n"
"  return \"AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2\";\n"
"#elif defined(EIGEN_VECTORIZE_SSE4_2)\n"
"  return \"SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2\";\n"
"#elif defined(EIGEN_VECTORIZE_SSE4_1)\n"
"  return \"SSE, SSE2, SSE3, SSSE3, SSE4.1\";\n"
"#elif defined(EIGEN_VECTORIZE_SSSE3)\n"
"  return \"SSE, SSE2, SSE3, SSSE3\";\n"
"#elif defined(EIGEN_VECTORIZE_SSE3)\n"
"  return \"SSE, SSE2, SSE3\";\n"
"#elif defined(EIGEN_VECTORIZE_SSE2)\n"
"  return \"SSE, SSE2\";\n"
"#elif defined(EIGEN_VECTORIZE_ALTIVEC)\n"
"  return \"AltiVec\";\n"
"#elif defined(EIGEN_VECTORIZE_VSX)\n"
"  return \"VSX\";\n"
"#elif defined(EIGEN_VECTORIZE_NEON)\n"
"  return \"ARM NEON\";\n"
"#elif defined(EIGEN_VECTORIZE_ZVECTOR)\n"
"  return \"S390X ZVECTOR\";\n"
"#else\n"
"  return \"None\";\n"
"#endif\n"
"}\n"
"\n"
"} // end namespace Eigen\n"
"\n"
"#if defined EIGEN2_SUPPORT_STAGE40_FULL_EIGEN3_STRICTNESS || defined EIGEN2_SUPPORT_STAGE30_FULL_EIGEN3_API || defined EIGEN2_SUPPORT_STAGE20_RESOLVE_API_CONFLICTS || defined EIGEN2_SUPPORT_STAGE10_FULL_EIGEN2_API || defined EIGEN2_SUPPORT\n"
"// This will generate an error message:\n"
"#error Eigen2-support is only available up to version 3.2. Please go to \"http://eigen.tuxfamily.org/index.php?title=Eigen2\" for further information\n"
"#endif\n"
"\n"
"namespace Eigen {\n"
"\n"
"// we use size_t frequently and we'll never remember to prepend it with std:: everytime just to\n"
"// ensure QNX/QCC support\n"
"using std::size_t;\n"
"// gcc 4.6.0 wants std:: for ptrdiff_t\n"
"using std::ptrdiff_t;\n"
"\n"
"}\n"
"\n"
"/** \\defgroup Core_Module Core module\n"
"  * This is the main module of Eigen providing dense matrix and vector support\n"
"  * (both fixed and dynamic size) with all the features corresponding to a BLAS library\n"
"  * and much more...\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/Core>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/Core/util/Constants.h\"\n"
"#include \"src/Core/util/Meta.h\"\n"
"#include \"src/Core/util/ForwardDeclarations.h\"\n"
"#include \"src/Core/util/StaticAssert.h\"\n"
"#include \"src/Core/util/XprHelper.h\"\n"
"#include \"src/Core/util/Memory.h\"\n"
"\n"
"#include \"src/Core/NumTraits.h\"\n"
"#include \"src/Core/MathFunctions.h\"\n"
"#include \"src/Core/GenericPacketMath.h\"\n"
"#include \"src/Core/MathFunctionsImpl.h\"\n"
"#include \"src/Core/arch/Default/ConjHelper.h\"\n"
"\n"
"#if defined EIGEN_VECTORIZE_AVX512\n"
"  #include \"src/Core/arch/SSE/PacketMath.h\"\n"
"  #include \"src/Core/arch/AVX/PacketMath.h\"\n"
"  #include \"src/Core/arch/AVX512/PacketMath.h\"\n"
"  #include \"src/Core/arch/AVX512/MathFunctions.h\"\n"
"#elif defined EIGEN_VECTORIZE_AVX\n"
"  // Use AVX for floats and doubles, SSE for integers\n"
"  #include \"src/Core/arch/SSE/PacketMath.h\"\n"
"  #include \"src/Core/arch/SSE/Complex.h\"\n"
"  #include \"src/Core/arch/SSE/MathFunctions.h\"\n"
"  #include \"src/Core/arch/AVX/PacketMath.h\"\n"
"  #include \"src/Core/arch/AVX/MathFunctions.h\"\n"
"  #include \"src/Core/arch/AVX/Complex.h\"\n"
"  #include \"src/Core/arch/AVX/TypeCasting.h\"\n"
"  #include \"src/Core/arch/SSE/TypeCasting.h\"\n"
"#elif defined EIGEN_VECTORIZE_SSE\n"
"  #include \"src/Core/arch/SSE/PacketMath.h\"\n"
"  #include \"src/Core/arch/SSE/MathFunctions.h\"\n"
"  #include \"src/Core/arch/SSE/Complex.h\"\n"
"  #include \"src/Core/arch/SSE/TypeCasting.h\"\n"
"#elif defined(EIGEN_VECTORIZE_ALTIVEC) || defined(EIGEN_VECTORIZE_VSX)\n"
"  #include \"src/Core/arch/AltiVec/PacketMath.h\"\n"
"  #include \"src/Core/arch/AltiVec/MathFunctions.h\"\n"
"  #include \"src/Core/arch/AltiVec/Complex.h\"\n"
"#elif defined EIGEN_VECTORIZE_NEON\n"
"  #include \"src/Core/arch/NEON/PacketMath.h\"\n"
"  #include \"src/Core/arch/NEON/MathFunctions.h\"\n"
"  #include \"src/Core/arch/NEON/Complex.h\"\n"
"#elif defined EIGEN_VECTORIZE_ZVECTOR\n"
"  #include \"src/Core/arch/ZVector/PacketMath.h\"\n"
"  #include \"src/Core/arch/ZVector/MathFunctions.h\"\n"
"  #include \"src/Core/arch/ZVector/Complex.h\"\n"
"#endif\n"
"\n"
"// Half float support\n"
"#include \"src/Core/arch/CUDA/Half.h\"\n"
"#include \"src/Core/arch/CUDA/PacketMathHalf.h\"\n"
"#include \"src/Core/arch/CUDA/TypeCasting.h\"\n"
"\n"
"#if defined EIGEN_VECTORIZE_CUDA\n"
"  #include \"src/Core/arch/CUDA/PacketMath.h\"\n"
"  #include \"src/Core/arch/CUDA/MathFunctions.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/arch/Default/Settings.h\"\n"
"\n"
"#include \"src/Core/functors/TernaryFunctors.h\"\n"
"#include \"src/Core/functors/BinaryFunctors.h\"\n"
"#include \"src/Core/functors/UnaryFunctors.h\"\n"
"#include \"src/Core/functors/NullaryFunctors.h\"\n"
"#include \"src/Core/functors/StlFunctors.h\"\n"
"#include \"src/Core/functors/AssignmentFunctors.h\"\n"
"\n"
"// Specialized functors to enable the processing of complex numbers\n"
"// on CUDA devices\n"
"#include \"src/Core/arch/CUDA/Complex.h\"\n"
"\n"
"#include \"src/Core/IO.h\"\n"
"#include \"src/Core/DenseCoeffsBase.h\"\n"
"#include \"src/Core/DenseBase.h\"\n"
"#include \"src/Core/MatrixBase.h\"\n"
"#include \"src/Core/EigenBase.h\"\n"
"\n"
"#include \"src/Core/Product.h\"\n"
"#include \"src/Core/CoreEvaluators.h\"\n"
"#include \"src/Core/AssignEvaluator.h\"\n"
"\n"
"#ifndef EIGEN_PARSED_BY_DOXYGEN // work around Doxygen bug triggered by Assign.h r814874\n"
"                                // at least confirmed with Doxygen 1.5.5 and 1.5.6\n"
"  #include \"src/Core/Assign.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/ArrayBase.h\"\n"
"#include \"src/Core/util/BlasUtil.h\"\n"
"#include \"src/Core/DenseStorage.h\"\n"
"#include \"src/Core/NestByValue.h\"\n"
"\n"
"// #include \"src/Core/ForceAlignedAccess.h\"\n"
"\n"
"#include \"src/Core/ReturnByValue.h\"\n"
"#include \"src/Core/NoAlias.h\"\n"
"#include \"src/Core/PlainObjectBase.h\"\n"
"#include \"src/Core/Matrix.h\"\n"
"#include \"src/Core/Array.h\"\n"
"#include \"src/Core/CwiseTernaryOp.h\"\n"
"#include \"src/Core/CwiseBinaryOp.h\"\n"
"#include \"src/Core/CwiseUnaryOp.h\"\n"
"#include \"src/Core/CwiseNullaryOp.h\"\n"
"#include \"src/Core/CwiseUnaryView.h\"\n"
"#include \"src/Core/SelfCwiseBinaryOp.h\"\n"
"#include \"src/Core/Dot.h\"\n"
"#include \"src/Core/StableNorm.h\"\n"
"#include \"src/Core/Stride.h\"\n"
"#include \"src/Core/MapBase.h\"\n"
"#include \"src/Core/Map.h\"\n"
"#include \"src/Core/Ref.h\"\n"
"#include \"src/Core/Block.h\"\n"
"#include \"src/Core/VectorBlock.h\"\n"
"#include \"src/Core/Transpose.h\"\n"
"#include \"src/Core/DiagonalMatrix.h\"\n"
"#include \"src/Core/Diagonal.h\"\n"
"#include \"src/Core/DiagonalProduct.h\"\n"
"#include \"src/Core/Redux.h\"\n"
"#include \"src/Core/Visitor.h\"\n"
"#include \"src/Core/Fuzzy.h\"\n"
"#include \"src/Core/Swap.h\"\n"
"#include \"src/Core/CommaInitializer.h\"\n"
"#include \"src/Core/GeneralProduct.h\"\n"
"#include \"src/Core/Solve.h\"\n"
"#include \"src/Core/Inverse.h\"\n"
"#include \"src/Core/SolverBase.h\"\n"
"#include \"src/Core/PermutationMatrix.h\"\n"
"#include \"src/Core/Transpositions.h\"\n"
"#include \"src/Core/TriangularMatrix.h\"\n"
"#include \"src/Core/SelfAdjointView.h\"\n"
"#include \"src/Core/products/GeneralBlockPanelKernel.h\"\n"
"#include \"src/Core/products/Parallelizer.h\"\n"
"#include \"src/Core/ProductEvaluators.h\"\n"
"#include \"src/Core/products/GeneralMatrixVector.h\"\n"
"#include \"src/Core/products/GeneralMatrixMatrix.h\"\n"
"#include \"src/Core/SolveTriangular.h\"\n"
"#include \"src/Core/products/GeneralMatrixMatrixTriangular.h\"\n"
"#include \"src/Core/products/SelfadjointMatrixVector.h\"\n"
"#include \"src/Core/products/SelfadjointMatrixMatrix.h\"\n"
"#include \"src/Core/products/SelfadjointProduct.h\"\n"
"#include \"src/Core/products/SelfadjointRank2Update.h\"\n"
"#include \"src/Core/products/TriangularMatrixVector.h\"\n"
"#include \"src/Core/products/TriangularMatrixMatrix.h\"\n"
"#include \"src/Core/products/TriangularSolverMatrix.h\"\n"
"#include \"src/Core/products/TriangularSolverVector.h\"\n"
"#include \"src/Core/BandMatrix.h\"\n"
"#include \"src/Core/CoreIterators.h\"\n"
"#include \"src/Core/ConditionEstimator.h\"\n"
"\n"
"#include \"src/Core/BooleanRedux.h\"\n"
"#include \"src/Core/Select.h\"\n"
"#include \"src/Core/VectorwiseOp.h\"\n"
"#include \"src/Core/Random.h\"\n"
"#include \"src/Core/Replicate.h\"\n"
"#include \"src/Core/Reverse.h\"\n"
"#include \"src/Core/ArrayWrapper.h\"\n"
"\n"
"#ifdef EIGEN_USE_BLAS\n"
"#include \"src/Core/products/GeneralMatrixMatrix_BLAS.h\"\n"
"#include \"src/Core/products/GeneralMatrixVector_BLAS.h\"\n"
"#include \"src/Core/products/GeneralMatrixMatrixTriangular_BLAS.h\"\n"
"#include \"src/Core/products/SelfadjointMatrixMatrix_BLAS.h\"\n"
"#include \"src/Core/products/SelfadjointMatrixVector_BLAS.h\"\n"
"#include \"src/Core/products/TriangularMatrixMatrix_BLAS.h\"\n"
"#include \"src/Core/products/TriangularMatrixVector_BLAS.h\"\n"
"#include \"src/Core/products/TriangularSolverMatrix_BLAS.h\"\n"
"#endif // EIGEN_USE_BLAS\n"
"\n"
"#ifdef EIGEN_USE_MKL_VML\n"
"#include \"src/Core/Assign_MKL.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/GlobalFunctions.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_CORE_H\n";

const char* Core = (const char*) temp_binary_data_3;

//================== Dense ==================
static const unsigned char temp_binary_data_4[] =
"#include \"Core\"\n"
"#include \"LU\"\n"
"#include \"Cholesky\"\n"
"#include \"QR\"\n"
"#include \"SVD\"\n"
"#include \"Geometry\"\n"
"#include \"Eigenvalues\"\n";

const char* Dense = (const char*) temp_binary_data_4;

//================== Eigen ==================
static const unsigned char temp_binary_data_5[] =
"#include \"Dense\"\n"
"#include \"Sparse\"\n";

const char* Eigen = (const char*) temp_binary_data_5;

//================== Eigenvalues ==================
static const unsigned char temp_binary_data_6[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_EIGENVALUES_MODULE_H\n"
"#define EIGEN_EIGENVALUES_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#include \"Cholesky\"\n"
"#include \"Jacobi\"\n"
"#include \"Householder\"\n"
"#include \"LU\"\n"
"#include \"Geometry\"\n"
"\n"
"/** \\defgroup Eigenvalues_Module Eigenvalues module\n"
"  *\n"
"  *\n"
"  *\n"
"  * This module mainly provides various eigenvalue solvers.\n"
"  * This module also provides some MatrixBase methods, including:\n"
"  *  - MatrixBase::eigenvalues(),\n"
"  *  - MatrixBase::operatorNorm()\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/Eigenvalues>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/misc/RealSvd2x2.h\"\n"
"#include \"src/Eigenvalues/Tridiagonalization.h\"\n"
"#include \"src/Eigenvalues/RealSchur.h\"\n"
"#include \"src/Eigenvalues/EigenSolver.h\"\n"
"#include \"src/Eigenvalues/SelfAdjointEigenSolver.h\"\n"
"#include \"src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h\"\n"
"#include \"src/Eigenvalues/HessenbergDecomposition.h\"\n"
"#include \"src/Eigenvalues/ComplexSchur.h\"\n"
"#include \"src/Eigenvalues/ComplexEigenSolver.h\"\n"
"#include \"src/Eigenvalues/RealQZ.h\"\n"
"#include \"src/Eigenvalues/GeneralizedEigenSolver.h\"\n"
"#include \"src/Eigenvalues/MatrixBaseEigenvalues.h\"\n"
"#ifdef EIGEN_USE_LAPACKE\n"
"#ifdef EIGEN_USE_MKL\n"
"#include \"mkl_lapacke.h\"\n"
"#else\n"
"#include \"src/misc/lapacke.h\"\n"
"#endif\n"
"#include \"src/Eigenvalues/RealSchur_LAPACKE.h\"\n"
"#include \"src/Eigenvalues/ComplexSchur_LAPACKE.h\"\n"
"#include \"src/Eigenvalues/SelfAdjointEigenSolver_LAPACKE.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_EIGENVALUES_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* Eigenvalues = (const char*) temp_binary_data_6;

//================== Geometry ==================
static const unsigned char temp_binary_data_7[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_GEOMETRY_MODULE_H\n"
"#define EIGEN_GEOMETRY_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#include \"SVD\"\n"
"#include \"LU\"\n"
"#include <limits>\n"
"\n"
"/** \\defgroup Geometry_Module Geometry module\n"
"  *\n"
"  * This module provides support for:\n"
"  *  - fixed-size homogeneous transformations\n"
"  *  - translation, scaling, 2D and 3D rotations\n"
"  *  - \\link Quaternion quaternions \\endlink\n"
"  *  - cross products (\\ref MatrixBase::cross, \\ref MatrixBase::cross3)\n"
"  *  - orthognal vector generation (\\ref MatrixBase::unitOrthogonal)\n"
"  *  - some linear components: \\link ParametrizedLine parametrized-lines \\endlink and \\link Hyperplane hyperplanes \\endlink\n"
"  *  - \\link AlignedBox axis aligned bounding boxes \\endlink\n"
"  *  - \\link umeyama least-square transformation fitting \\endlink\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/Geometry>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/Geometry/OrthoMethods.h\"\n"
"#include \"src/Geometry/EulerAngles.h\"\n"
"\n"
"#include \"src/Geometry/Homogeneous.h\"\n"
"#include \"src/Geometry/RotationBase.h\"\n"
"#include \"src/Geometry/Rotation2D.h\"\n"
"#include \"src/Geometry/Quaternion.h\"\n"
"#include \"src/Geometry/AngleAxis.h\"\n"
"#include \"src/Geometry/Transform.h\"\n"
"#include \"src/Geometry/Translation.h\"\n"
"#include \"src/Geometry/Scaling.h\"\n"
"#include \"src/Geometry/Hyperplane.h\"\n"
"#include \"src/Geometry/ParametrizedLine.h\"\n"
"#include \"src/Geometry/AlignedBox.h\"\n"
"#include \"src/Geometry/Umeyama.h\"\n"
"\n"
"// Use the SSE optimized version whenever possible. At the moment the\n"
"// SSE version doesn't compile when AVX is enabled\n"
"#if defined EIGEN_VECTORIZE_SSE && !defined EIGEN_VECTORIZE_AVX\n"
"#include \"src/Geometry/arch/Geometry_SSE.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_GEOMETRY_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n"
"\n";

const char* Geometry = (const char*) temp_binary_data_7;

//================== Householder ==================
static const unsigned char temp_binary_data_8[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_HOUSEHOLDER_MODULE_H\n"
"#define EIGEN_HOUSEHOLDER_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \\defgroup Householder_Module Householder module\n"
"  * This module provides Householder transformations.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/Householder>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/Householder/Householder.h\"\n"
"#include \"src/Householder/HouseholderSequence.h\"\n"
"#include \"src/Householder/BlockHouseholder.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_HOUSEHOLDER_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* Householder = (const char*) temp_binary_data_8;

//================== IterativeLinearSolvers ==================
static const unsigned char temp_binary_data_9[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_ITERATIVELINEARSOLVERS_MODULE_H\n"
"#define EIGEN_ITERATIVELINEARSOLVERS_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"#include \"OrderingMethods\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \n"
"  * \\defgroup IterativeLinearSolvers_Module IterativeLinearSolvers module\n"
"  *\n"
"  * This module currently provides iterative methods to solve problems of the form \\c A \\c x = \\c b, where \\c A is a squared matrix, usually very large and sparse.\n"
"  * Those solvers are accessible via the following classes:\n"
"  *  - ConjugateGradient for selfadjoint (hermitian) matrices,\n"
"  *  - LeastSquaresConjugateGradient for rectangular least-square problems,\n"
"  *  - BiCGSTAB for general square matrices.\n"
"  *\n"
"  * These iterative solvers are associated with some preconditioners:\n"
"  *  - IdentityPreconditioner - not really useful\n"
"  *  - DiagonalPreconditioner - also called Jacobi preconditioner, work very well on diagonal dominant matrices.\n"
"  *  - IncompleteLUT - incomplete LU factorization with dual thresholding\n"
"  *\n"
"  * Such problems can also be solved using the direct sparse decomposition modules: SparseCholesky, CholmodSupport, UmfPackSupport, SuperLUSupport.\n"
"  *\n"
"    \\code\n"
"    #include <Eigen/IterativeLinearSolvers>\n"
"    \\endcode\n"
"  */\n"
"\n"
"#include \"src/IterativeLinearSolvers/SolveWithGuess.h\"\n"
"#include \"src/IterativeLinearSolvers/IterativeSolverBase.h\"\n"
"#include \"src/IterativeLinearSolvers/BasicPreconditioners.h\"\n"
"#include \"src/IterativeLinearSolvers/ConjugateGradient.h\"\n"
"#include \"src/IterativeLinearSolvers/LeastSquareConjugateGradient.h\"\n"
"#include \"src/IterativeLinearSolvers/BiCGSTAB.h\"\n"
"#include \"src/IterativeLinearSolvers/IncompleteLUT.h\"\n"
"#include \"src/IterativeLinearSolvers/IncompleteCholesky.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_ITERATIVELINEARSOLVERS_MODULE_H\n";

const char* IterativeLinearSolvers = (const char*) temp_binary_data_9;

//================== Jacobi ==================
static const unsigned char temp_binary_data_10[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_JACOBI_MODULE_H\n"
"#define EIGEN_JACOBI_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \\defgroup Jacobi_Module Jacobi module\n"
"  * This module provides Jacobi and Givens rotations.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/Jacobi>\n"
"  * \\endcode\n"
"  *\n"
"  * In addition to listed classes, it defines the two following MatrixBase methods to apply a Jacobi or Givens rotation:\n"
"  *  - MatrixBase::applyOnTheLeft()\n"
"  *  - MatrixBase::applyOnTheRight().\n"
"  */\n"
"\n"
"#include \"src/Jacobi/Jacobi.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_JACOBI_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n"
"\n";

const char* Jacobi = (const char*) temp_binary_data_10;

//================== LU ==================
static const unsigned char temp_binary_data_11[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_LU_MODULE_H\n"
"#define EIGEN_LU_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \\defgroup LU_Module LU module\n"
"  * This module includes %LU decomposition and related notions such as matrix inversion and determinant.\n"
"  * This module defines the following MatrixBase methods:\n"
"  *  - MatrixBase::inverse()\n"
"  *  - MatrixBase::determinant()\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/LU>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/misc/Kernel.h\"\n"
"#include \"src/misc/Image.h\"\n"
"#include \"src/LU/FullPivLU.h\"\n"
"#include \"src/LU/PartialPivLU.h\"\n"
"#ifdef EIGEN_USE_LAPACKE\n"
"#ifdef EIGEN_USE_MKL\n"
"#include \"mkl_lapacke.h\"\n"
"#else\n"
"#include \"src/misc/lapacke.h\"\n"
"#endif\n"
"#include \"src/LU/PartialPivLU_LAPACKE.h\"\n"
"#endif\n"
"#include \"src/LU/Determinant.h\"\n"
"#include \"src/LU/InverseImpl.h\"\n"
"\n"
"// Use the SSE optimized version whenever possible. At the moment the\n"
"// SSE version doesn't compile when AVX is enabled\n"
"#if defined EIGEN_VECTORIZE_SSE && !defined EIGEN_VECTORIZE_AVX\n"
"  #include \"src/LU/arch/Inverse_SSE.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_LU_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* LU = (const char*) temp_binary_data_11;

//================== MetisSupport ==================
static const unsigned char temp_binary_data_12[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_METISSUPPORT_MODULE_H\n"
"#define EIGEN_METISSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"extern \"C\" {\n"
"#include <metis.h>\n"
"}\n"
"\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup MetisSupport_Module MetisSupport module\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/MetisSupport>\n"
"  * \\endcode\n"
"  * This module defines an interface to the METIS reordering package (http://glaros.dtc.umn.edu/gkhome/views/metis). \n"
"  * It can be used just as any other built-in method as explained in \\link OrderingMethods_Module here. \\endlink\n"
"  */\n"
"\n"
"\n"
"#include \"src/MetisSupport/MetisSupport.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_METISSUPPORT_MODULE_H\n";

const char* MetisSupport = (const char*) temp_binary_data_12;

//================== OrderingMethods ==================
static const unsigned char temp_binary_data_13[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_ORDERINGMETHODS_MODULE_H\n"
"#define EIGEN_ORDERINGMETHODS_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \n"
"  * \\defgroup OrderingMethods_Module OrderingMethods module\n"
"  *\n"
"  * This module is currently for internal use only\n"
"  * \n"
"  * It defines various built-in and external ordering methods for sparse matrices. \n"
"  * They are typically used to reduce the number of elements during \n"
"  * the sparse matrix decomposition (LLT, LU, QR).\n"
"  * Precisely, in a preprocessing step, a permutation matrix P is computed using \n"
"  * those ordering methods and applied to the columns of the matrix. \n"
"  * Using for instance the sparse Cholesky decomposition, it is expected that \n"
"  * the nonzeros elements in LLT(A*P) will be much smaller than that in LLT(A).\n"
"  * \n"
"  * \n"
"  * Usage : \n"
"  * \\code\n"
"  * #include <Eigen/OrderingMethods>\n"
"  * \\endcode\n"
"  * \n"
"  * A simple usage is as a template parameter in the sparse decomposition classes : \n"
"  * \n"
"  * \\code \n"
"  * SparseLU<MatrixType, COLAMDOrdering<int> > solver;\n"
"  * \\endcode \n"
"  * \n"
"  * \\code \n"
"  * SparseQR<MatrixType, COLAMDOrdering<int> > solver;\n"
"  * \\endcode\n"
"  * \n"
"  * It is possible as well to call directly a particular ordering method for your own purpose, \n"
"  * \\code \n"
"  * AMDOrdering<int> ordering;\n"
"  * PermutationMatrix<Dynamic, Dynamic, int> perm;\n"
"  * SparseMatrix<double> A; \n"
"  * //Fill the matrix ...\n"
"  * \n"
"  * ordering(A, perm); // Call AMD\n"
"  * \\endcode\n"
"  * \n"
"  * \\note Some of these methods (like AMD or METIS), need the sparsity pattern \n"
"  * of the input matrix to be symmetric. When the matrix is structurally unsymmetric, \n"
"  * Eigen computes internally the pattern of \\f$A^T*A\\f$ before calling the method.\n"
"  * If your matrix is already symmetric (at leat in structure), you can avoid that\n"
"  * by calling the method with a SelfAdjointView type.\n"
"  * \n"
"  * \\code\n"
"  *  // Call the ordering on the pattern of the lower triangular matrix A\n"
"  * ordering(A.selfadjointView<Lower>(), perm);\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#ifndef EIGEN_MPL2_ONLY\n"
"#include \"src/OrderingMethods/Amd.h\"\n"
"#endif\n"
"\n"
"#include \"src/OrderingMethods/Ordering.h\"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_ORDERINGMETHODS_MODULE_H\n";

const char* OrderingMethods = (const char*) temp_binary_data_13;

//================== PardisoSupport ==================
static const unsigned char temp_binary_data_14[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_PARDISOSUPPORT_MODULE_H\n"
"#define EIGEN_PARDISOSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#include <mkl_pardiso.h>\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup PardisoSupport_Module PardisoSupport module\n"
"  *\n"
"  * This module brings support for the Intel(R) MKL PARDISO direct sparse solvers.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/PardisoSupport>\n"
"  * \\endcode\n"
"  *\n"
"  * In order to use this module, the MKL headers must be accessible from the include paths, and your binary must be linked to the MKL library and its dependencies.\n"
"  * See this \\ref TopicUsingIntelMKL \"page\" for more information on MKL-Eigen integration.\n"
"  * \n"
"  */\n"
"\n"
"#include \"src/PardisoSupport/PardisoSupport.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_PARDISOSUPPORT_MODULE_H\n";

const char* PardisoSupport = (const char*) temp_binary_data_14;

//================== PaStiXSupport ==================
static const unsigned char temp_binary_data_15[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_PASTIXSUPPORT_MODULE_H\n"
"#define EIGEN_PASTIXSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"extern \"C\" {\n"
"#include <pastix_nompi.h>\n"
"#include <pastix.h>\n"
"}\n"
"\n"
"#ifdef complex\n"
"#undef complex\n"
"#endif\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup PaStiXSupport_Module PaStiXSupport module\n"
"  * \n"
"  * This module provides an interface to the <a href=\"http://pastix.gforge.inria.fr/\">PaSTiX</a> library.\n"
"  * PaSTiX is a general \\b supernodal, \\b parallel and \\b opensource sparse solver.\n"
"  * It provides the two following main factorization classes:\n"
"  * - class PastixLLT : a supernodal, parallel LLt Cholesky factorization.\n"
"  * - class PastixLDLT: a supernodal, parallel LDLt Cholesky factorization.\n"
"  * - class PastixLU : a supernodal, parallel LU factorization (optimized for a symmetric pattern).\n"
"  * \n"
"  * \\code\n"
"  * #include <Eigen/PaStiXSupport>\n"
"  * \\endcode\n"
"  *\n"
"  * In order to use this module, the PaSTiX headers must be accessible from the include paths, and your binary must be linked to the PaSTiX library and its dependencies.\n"
"  * The dependencies depend on how PaSTiX has been compiled.\n"
"  * For a cmake based project, you can use our FindPaSTiX.cmake module to help you in this task.\n"
"  *\n"
"  */\n"
"\n"
"#include \"src/PaStiXSupport/PaStiXSupport.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_PASTIXSUPPORT_MODULE_H\n";

const char* PaStiXSupport = (const char*) temp_binary_data_15;

//================== QR ==================
static const unsigned char temp_binary_data_16[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_QR_MODULE_H\n"
"#define EIGEN_QR_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#include \"Cholesky\"\n"
"#include \"Jacobi\"\n"
"#include \"Householder\"\n"
"\n"
"/** \\defgroup QR_Module QR module\n"
"  *\n"
"  *\n"
"  *\n"
"  * This module provides various QR decompositions\n"
"  * This module also provides some MatrixBase methods, including:\n"
"  *  - MatrixBase::householderQr()\n"
"  *  - MatrixBase::colPivHouseholderQr()\n"
"  *  - MatrixBase::fullPivHouseholderQr()\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/QR>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/QR/HouseholderQR.h\"\n"
"#include \"src/QR/FullPivHouseholderQR.h\"\n"
"#include \"src/QR/ColPivHouseholderQR.h\"\n"
"#include \"src/QR/CompleteOrthogonalDecomposition.h\"\n"
"#ifdef EIGEN_USE_LAPACKE\n"
"#ifdef EIGEN_USE_MKL\n"
"#include \"mkl_lapacke.h\"\n"
"#else\n"
"#include \"src/misc/lapacke.h\"\n"
"#endif\n"
"#include \"src/QR/HouseholderQR_LAPACKE.h\"\n"
"#include \"src/QR/ColPivHouseholderQR_LAPACKE.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_QR_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* QR = (const char*) temp_binary_data_16;

//================== QtAlignedMalloc ==================
static const unsigned char temp_binary_data_17[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_QTMALLOC_MODULE_H\n"
"#define EIGEN_QTMALLOC_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#if (!EIGEN_MALLOC_ALREADY_ALIGNED)\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"void *qMalloc(std::size_t size)\n"
"{\n"
"  return Eigen::internal::aligned_malloc(size);\n"
"}\n"
"\n"
"void qFree(void *ptr)\n"
"{\n"
"  Eigen::internal::aligned_free(ptr);\n"
"}\n"
"\n"
"void *qRealloc(void *ptr, std::size_t size)\n"
"{\n"
"  void* newPtr = Eigen::internal::aligned_malloc(size);\n"
"  std::memcpy(newPtr, ptr, size);\n"
"  Eigen::internal::aligned_free(ptr);\n"
"  return newPtr;\n"
"}\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif\n"
"\n"
"#endif // EIGEN_QTMALLOC_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* QtAlignedMalloc = (const char*) temp_binary_data_17;

//================== Sparse ==================
static const unsigned char temp_binary_data_18[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SPARSE_MODULE_H\n"
"#define EIGEN_SPARSE_MODULE_H\n"
"\n"
"/** \\defgroup Sparse_Module Sparse meta-module\n"
"  *\n"
"  * Meta-module including all related modules:\n"
"  * - \\ref SparseCore_Module\n"
"  * - \\ref OrderingMethods_Module\n"
"  * - \\ref SparseCholesky_Module\n"
"  * - \\ref SparseLU_Module\n"
"  * - \\ref SparseQR_Module\n"
"  * - \\ref IterativeLinearSolvers_Module\n"
"  *\n"
"    \\code\n"
"    #include <Eigen/Sparse>\n"
"    \\endcode\n"
"  */\n"
"\n"
"#include \"SparseCore\"\n"
"#include \"OrderingMethods\"\n"
"#ifndef EIGEN_MPL2_ONLY\n"
"#include \"SparseCholesky\"\n"
"#endif\n"
"#include \"SparseLU\"\n"
"#include \"SparseQR\"\n"
"#include \"IterativeLinearSolvers\"\n"
"\n"
"#endif // EIGEN_SPARSE_MODULE_H\n"
"\n";

const char* Sparse = (const char*) temp_binary_data_18;

//================== SparseCholesky ==================
static const unsigned char temp_binary_data_19[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// Copyright (C) 2008-2013 Gael Guennebaud <gael.guennebaud@inria.fr>\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SPARSECHOLESKY_MODULE_H\n"
"#define EIGEN_SPARSECHOLESKY_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"#include \"OrderingMethods\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \n"
"  * \\defgroup SparseCholesky_Module SparseCholesky module\n"
"  *\n"
"  * This module currently provides two variants of the direct sparse Cholesky decomposition for selfadjoint (hermitian) matrices.\n"
"  * Those decompositions are accessible via the following classes:\n"
"  *  - SimplicialLLt,\n"
"  *  - SimplicialLDLt\n"
"  *\n"
"  * Such problems can also be solved using the ConjugateGradient solver from the IterativeLinearSolvers module.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/SparseCholesky>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#ifdef EIGEN_MPL2_ONLY\n"
"#error The SparseCholesky module has nothing to offer in MPL2 only mode\n"
"#endif\n"
"\n"
"#include \"src/SparseCholesky/SimplicialCholesky.h\"\n"
"\n"
"#ifndef EIGEN_MPL2_ONLY\n"
"#include \"src/SparseCholesky/SimplicialCholesky_impl.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_SPARSECHOLESKY_MODULE_H\n";

const char* SparseCholesky = (const char*) temp_binary_data_19;

//================== SparseCore ==================
static const unsigned char temp_binary_data_20[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SPARSECORE_MODULE_H\n"
"#define EIGEN_SPARSECORE_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#include <vector>\n"
"#include <map>\n"
"#include <cstdlib>\n"
"#include <cstring>\n"
"#include <algorithm>\n"
"\n"
"/** \n"
"  * \\defgroup SparseCore_Module SparseCore module\n"
"  *\n"
"  * This module provides a sparse matrix representation, and basic associated matrix manipulations\n"
"  * and operations.\n"
"  *\n"
"  * See the \\ref TutorialSparse \"Sparse tutorial\"\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/SparseCore>\n"
"  * \\endcode\n"
"  *\n"
"  * This module depends on: Core.\n"
"  */\n"
"\n"
"#include \"src/SparseCore/SparseUtil.h\"\n"
"#include \"src/SparseCore/SparseMatrixBase.h\"\n"
"#include \"src/SparseCore/SparseAssign.h\"\n"
"#include \"src/SparseCore/CompressedStorage.h\"\n"
"#include \"src/SparseCore/AmbiVector.h\"\n"
"#include \"src/SparseCore/SparseCompressedBase.h\"\n"
"#include \"src/SparseCore/SparseMatrix.h\"\n"
"#include \"src/SparseCore/SparseMap.h\"\n"
"#include \"src/SparseCore/MappedSparseMatrix.h\"\n"
"#include \"src/SparseCore/SparseVector.h\"\n"
"#include \"src/SparseCore/SparseRef.h\"\n"
"#include \"src/SparseCore/SparseCwiseUnaryOp.h\"\n"
"#include \"src/SparseCore/SparseCwiseBinaryOp.h\"\n"
"#include \"src/SparseCore/SparseTranspose.h\"\n"
"#include \"src/SparseCore/SparseBlock.h\"\n"
"#include \"src/SparseCore/SparseDot.h\"\n"
"#include \"src/SparseCore/SparseRedux.h\"\n"
"#include \"src/SparseCore/SparseView.h\"\n"
"#include \"src/SparseCore/SparseDiagonalProduct.h\"\n"
"#include \"src/SparseCore/ConservativeSparseSparseProduct.h\"\n"
"#include \"src/SparseCore/SparseSparseProductWithPruning.h\"\n"
"#include \"src/SparseCore/SparseProduct.h\"\n"
"#include \"src/SparseCore/SparseDenseProduct.h\"\n"
"#include \"src/SparseCore/SparseSelfAdjointView.h\"\n"
"#include \"src/SparseCore/SparseTriangularView.h\"\n"
"#include \"src/SparseCore/TriangularSolver.h\"\n"
"#include \"src/SparseCore/SparsePermutation.h\"\n"
"#include \"src/SparseCore/SparseFuzzy.h\"\n"
"#include \"src/SparseCore/SparseSolverBase.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_SPARSECORE_MODULE_H\n"
"\n";

const char* SparseCore = (const char*) temp_binary_data_20;

//================== SparseLU ==================
static const unsigned char temp_binary_data_21[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// Copyright (C) 2012 D\xc3\xa9sir\xc3\xa9 Nuentsa-Wakam <desire.nuentsa_wakam@inria.fr>\n"
"// Copyright (C) 2012 Gael Guennebaud <gael.guennebaud@inria.fr>\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SPARSELU_MODULE_H\n"
"#define EIGEN_SPARSELU_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"/** \n"
"  * \\defgroup SparseLU_Module SparseLU module\n"
"  * This module defines a supernodal factorization of general sparse matrices.\n"
"  * The code is fully optimized for supernode-panel updates with specialized kernels.\n"
"  * Please, see the documentation of the SparseLU class for more details.\n"
"  */\n"
"\n"
"// Ordering interface\n"
"#include \"OrderingMethods\"\n"
"\n"
"#include \"src/SparseLU/SparseLU_gemm_kernel.h\"\n"
"\n"
"#include \"src/SparseLU/SparseLU_Structs.h\"\n"
"#include \"src/SparseLU/SparseLU_SupernodalMatrix.h\"\n"
"#include \"src/SparseLU/SparseLUImpl.h\"\n"
"#include \"src/SparseCore/SparseColEtree.h\"\n"
"#include \"src/SparseLU/SparseLU_Memory.h\"\n"
"#include \"src/SparseLU/SparseLU_heap_relax_snode.h\"\n"
"#include \"src/SparseLU/SparseLU_relax_snode.h\"\n"
"#include \"src/SparseLU/SparseLU_pivotL.h\"\n"
"#include \"src/SparseLU/SparseLU_panel_dfs.h\"\n"
"#include \"src/SparseLU/SparseLU_kernel_bmod.h\"\n"
"#include \"src/SparseLU/SparseLU_panel_bmod.h\"\n"
"#include \"src/SparseLU/SparseLU_column_dfs.h\"\n"
"#include \"src/SparseLU/SparseLU_column_bmod.h\"\n"
"#include \"src/SparseLU/SparseLU_copy_to_ucol.h\"\n"
"#include \"src/SparseLU/SparseLU_pruneL.h\"\n"
"#include \"src/SparseLU/SparseLU_Utils.h\"\n"
"#include \"src/SparseLU/SparseLU.h\"\n"
"\n"
"#endif // EIGEN_SPARSELU_MODULE_H\n";

const char* SparseLU = (const char*) temp_binary_data_21;

//================== SparseQR ==================
static const unsigned char temp_binary_data_22[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SPARSEQR_MODULE_H\n"
"#define EIGEN_SPARSEQR_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"#include \"OrderingMethods\"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \\defgroup SparseQR_Module SparseQR module\n"
"  * \\brief Provides QR decomposition for sparse matrices\n"
"  * \n"
"  * This module provides a simplicial version of the left-looking Sparse QR decomposition. \n"
"  * The columns of the input matrix should be reordered to limit the fill-in during the \n"
"  * decomposition. Built-in methods (COLAMD, AMD) or external  methods (METIS) can be used to this end.\n"
"  * See the \\link OrderingMethods_Module OrderingMethods\\endlink module for the list \n"
"  * of built-in and external ordering methods.\n"
"  * \n"
"  * \\code\n"
"  * #include <Eigen/SparseQR>\n"
"  * \\endcode\n"
"  * \n"
"  * \n"
"  */\n"
"\n"
"#include \"OrderingMethods\"\n"
"#include \"src/SparseCore/SparseColEtree.h\"\n"
"#include \"src/SparseQR/SparseQR.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif\n";

const char* SparseQR = (const char*) temp_binary_data_22;

//================== SPQRSupport ==================
static const unsigned char temp_binary_data_23[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SPQRSUPPORT_MODULE_H\n"
"#define EIGEN_SPQRSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#include \"SuiteSparseQR.hpp\"\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup SPQRSupport_Module SuiteSparseQR module\n"
"  * \n"
"  * This module provides an interface to the SPQR library, which is part of the <a href=\"http://www.suitesparse.com\">suitesparse</a> package.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/SPQRSupport>\n"
"  * \\endcode\n"
"  *\n"
"  * In order to use this module, the SPQR headers must be accessible from the include paths, and your binary must be linked to the SPQR library and its dependencies (Cholmod, AMD, COLAMD,...).\n"
"  * For a cmake based project, you can use our FindSPQR.cmake and FindCholmod.Cmake modules\n"
"  *\n"
"  */\n"
"\n"
"#include \"src/CholmodSupport/CholmodSupport.h\"\n"
"#include \"src/SPQRSupport/SuiteSparseQRSupport.h\"\n"
"\n"
"#endif\n";

const char* SPQRSupport = (const char*) temp_binary_data_23;

//================== StdDeque ==================
static const unsigned char temp_binary_data_24[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>\n"
"// Copyright (C) 2009 Hauke Heibel <hauke.heibel@googlemail.com>\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_STDDEQUE_MODULE_H\n"
"#define EIGEN_STDDEQUE_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"#include <deque>\n"
"\n"
"#if EIGEN_COMP_MSVC && EIGEN_OS_WIN64 && (EIGEN_MAX_STATIC_ALIGN_BYTES<=16) /* MSVC auto aligns up to 16 bytes in 64 bit builds */\n"
"\n"
"#define EIGEN_DEFINE_STL_DEQUE_SPECIALIZATION(...)\n"
"\n"
"#else\n"
"\n"
"#include \"src/StlSupport/StdDeque.h\"\n"
"\n"
"#endif\n"
"\n"
"#endif // EIGEN_STDDEQUE_MODULE_H\n";

const char* StdDeque = (const char*) temp_binary_data_24;

//================== StdList ==================
static const unsigned char temp_binary_data_25[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// Copyright (C) 2009 Hauke Heibel <hauke.heibel@googlemail.com>\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_STDLIST_MODULE_H\n"
"#define EIGEN_STDLIST_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"#include <list>\n"
"\n"
"#if EIGEN_COMP_MSVC && EIGEN_OS_WIN64 && (EIGEN_MAX_STATIC_ALIGN_BYTES<=16) /* MSVC auto aligns up to 16 bytes in 64 bit builds */\n"
"\n"
"#define EIGEN_DEFINE_STL_LIST_SPECIALIZATION(...)\n"
"\n"
"#else\n"
"\n"
"#include \"src/StlSupport/StdList.h\"\n"
"\n"
"#endif\n"
"\n"
"#endif // EIGEN_STDLIST_MODULE_H\n";

const char* StdList = (const char*) temp_binary_data_25;

//================== StdVector ==================
static const unsigned char temp_binary_data_26[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>\n"
"// Copyright (C) 2009 Hauke Heibel <hauke.heibel@googlemail.com>\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_STDVECTOR_MODULE_H\n"
"#define EIGEN_STDVECTOR_MODULE_H\n"
"\n"
"#include \"Core\"\n"
"#include <vector>\n"
"\n"
"#if EIGEN_COMP_MSVC && EIGEN_OS_WIN64 && (EIGEN_MAX_STATIC_ALIGN_BYTES<=16) /* MSVC auto aligns up to 16 bytes in 64 bit builds */\n"
"\n"
"#define EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION(...)\n"
"\n"
"#else\n"
"\n"
"#include \"src/StlSupport/StdVector.h\"\n"
"\n"
"#endif\n"
"\n"
"#endif // EIGEN_STDVECTOR_MODULE_H\n";

const char* StdVector = (const char*) temp_binary_data_26;

//================== SuperLUSupport ==================
static const unsigned char temp_binary_data_27[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SUPERLUSUPPORT_MODULE_H\n"
"#define EIGEN_SUPERLUSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"#ifdef EMPTY\n"
"#define EIGEN_EMPTY_WAS_ALREADY_DEFINED\n"
"#endif\n"
"\n"
"typedef int int_t;\n"
"#include <slu_Cnames.h>\n"
"#include <supermatrix.h>\n"
"#include <slu_util.h>\n"
"\n"
"// slu_util.h defines a preprocessor token named EMPTY which is really polluting,\n"
"// so we remove it in favor of a SUPERLU_EMPTY token.\n"
"// If EMPTY was already defined then we don't undef it.\n"
"\n"
"#if defined(EIGEN_EMPTY_WAS_ALREADY_DEFINED)\n"
"# undef EIGEN_EMPTY_WAS_ALREADY_DEFINED\n"
"#elif defined(EMPTY)\n"
"# undef EMPTY\n"
"#endif\n"
"\n"
"#define SUPERLU_EMPTY (-1)\n"
"\n"
"namespace Eigen { struct SluMatrix; }\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup SuperLUSupport_Module SuperLUSupport module\n"
"  *\n"
"  * This module provides an interface to the <a href=\"http://crd-legacy.lbl.gov/~xiaoye/SuperLU/\">SuperLU</a> library.\n"
"  * It provides the following factorization class:\n"
"  * - class SuperLU: a supernodal sequential LU factorization.\n"
"  * - class SuperILU: a supernodal sequential incomplete LU factorization (to be used as a preconditioner for iterative methods).\n"
"  *\n"
"  * \\warning This wrapper requires at least versions 4.0 of SuperLU. The 3.x versions are not supported.\n"
"  *\n"
"  * \\warning When including this module, you have to use SUPERLU_EMPTY instead of EMPTY which is no longer defined because it is too polluting.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/SuperLUSupport>\n"
"  * \\endcode\n"
"  *\n"
"  * In order to use this module, the superlu headers must be accessible from the include paths, and your binary must be linked to the superlu library and its dependencies.\n"
"  * The dependencies depend on how superlu has been compiled.\n"
"  * For a cmake based project, you can use our FindSuperLU.cmake module to help you in this task.\n"
"  *\n"
"  */\n"
"\n"
"#include \"src/SuperLUSupport/SuperLUSupport.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_SUPERLUSUPPORT_MODULE_H\n";

const char* SuperLUSupport = (const char*) temp_binary_data_27;

//================== SVD ==================
static const unsigned char temp_binary_data_28[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_SVD_MODULE_H\n"
"#define EIGEN_SVD_MODULE_H\n"
"\n"
"#include \"QR\"\n"
"#include \"Householder\"\n"
"#include \"Jacobi\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"/** \\defgroup SVD_Module SVD module\n"
"  *\n"
"  *\n"
"  *\n"
"  * This module provides SVD decomposition for matrices (both real and complex).\n"
"  * Two decomposition algorithms are provided:\n"
"  *  - JacobiSVD implementing two-sided Jacobi iterations is numerically very accurate, fast for small matrices, but very slow for larger ones.\n"
"  *  - BDCSVD implementing a recursive divide & conquer strategy on top of an upper-bidiagonalization which remains fast for large problems.\n"
"  * These decompositions are accessible via the respective classes and following MatrixBase methods:\n"
"  *  - MatrixBase::jacobiSvd()\n"
"  *  - MatrixBase::bdcSvd()\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/SVD>\n"
"  * \\endcode\n"
"  */\n"
"\n"
"#include \"src/misc/RealSvd2x2.h\"\n"
"#include \"src/SVD/UpperBidiagonalization.h\"\n"
"#include \"src/SVD/SVDBase.h\"\n"
"#include \"src/SVD/JacobiSVD.h\"\n"
"#include \"src/SVD/BDCSVD.h\"\n"
"#if defined(EIGEN_USE_LAPACKE) && !defined(EIGEN_USE_LAPACKE_STRICT)\n"
"#ifdef EIGEN_USE_MKL\n"
"#include \"mkl_lapacke.h\"\n"
"#else\n"
"#include \"src/misc/lapacke.h\"\n"
"#endif\n"
"#include \"src/SVD/JacobiSVD_LAPACKE.h\"\n"
"#endif\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_SVD_MODULE_H\n"
"/* vim: set filetype=cpp et sw=2 ts=2 ai: */\n";

const char* SVD = (const char*) temp_binary_data_28;

//================== UmfPackSupport ==================
static const unsigned char temp_binary_data_29[] =
"// This file is part of Eigen, a lightweight C++ template library\n"
"// for linear algebra.\n"
"//\n"
"// This Source Code Form is subject to the terms of the Mozilla\n"
"// Public License v. 2.0. If a copy of the MPL was not distributed\n"
"// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
"\n"
"#ifndef EIGEN_UMFPACKSUPPORT_MODULE_H\n"
"#define EIGEN_UMFPACKSUPPORT_MODULE_H\n"
"\n"
"#include \"SparseCore\"\n"
"\n"
"#include \"src/Core/util/DisableStupidWarnings.h\"\n"
"\n"
"extern \"C\" {\n"
"#include <umfpack.h>\n"
"}\n"
"\n"
"/** \\ingroup Support_modules\n"
"  * \\defgroup UmfPackSupport_Module UmfPackSupport module\n"
"  *\n"
"  * This module provides an interface to the UmfPack library which is part of the <a href=\"http://www.suitesparse.com\">suitesparse</a> package.\n"
"  * It provides the following factorization class:\n"
"  * - class UmfPackLU: a multifrontal sequential LU factorization.\n"
"  *\n"
"  * \\code\n"
"  * #include <Eigen/UmfPackSupport>\n"
"  * \\endcode\n"
"  *\n"
"  * In order to use this module, the umfpack headers must be accessible from the include paths, and your binary must be linked to the umfpack library and its dependencies.\n"
"  * The dependencies depend on how umfpack has been compiled.\n"
"  * For a cmake based project, you can use our FindUmfPack.cmake module to help you in this task.\n"
"  *\n"
"  */\n"
"\n"
"#include \"src/UmfPackSupport/UmfPackSupport.h\"\n"
"\n"
"#include \"src/Core/util/ReenableStupidWarnings.h\"\n"
"\n"
"#endif // EIGEN_UMFPACKSUPPORT_MODULE_H\n";

const char* UmfPackSupport = (const char*) temp_binary_data_29;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x71024ebe:  numBytes = 1206; return Cholesky;
        case 0xfe5a710f:  numBytes = 1900; return CholmodSupport;
        case 0x90e15cf5:  numBytes = 694; return CMakeLists_txt;
        case 0x002023bf:  numBytes = 17961; return Core;
        case 0x03edd2ff:  numBytes = 122; return Dense;
        case 0x03fda00c:  numBytes = 35; return Eigen;
        case 0x80f6042e:  numBytes = 1822; return Eigenvalues;
        case 0x71e26c92:  numBytes = 2050; return Geometry;
        case 0xd03464ac:  numBytes = 874; return Householder;
        case 0xcb4ed54e:  numBytes = 2083; return IterativeLinearSolvers;
        case 0x83cc338a:  numBytes = 939; return Jacobi;
        case 0x00000989:  numBytes = 1433; return LU;
        case 0x2ed44d09:  numBytes = 991; return MetisSupport;
        case 0x20e2ff1e:  numBytes = 2483; return OrderingMethods;
        case 0x5790bfcd:  numBytes = 1116; return PardisoSupport;
        case 0xe4d2f3ae:  numBytes = 1676; return PaStiXSupport;
        case 0x00000a21:  numBytes = 1317; return QR;
        case 0xd49890e9:  numBytes = 945; return QtAlignedMalloc;
        case 0x93fa5640:  numBytes = 919; return Sparse;
        case 0x796264fe:  numBytes = 1371; return SparseCholesky;
        case 0xc68559ff:  numBytes = 2240; return SparseCore;
        case 0x7ebdcfc9:  numBytes = 1713; return SparseLU;
        case 0x7ebdd061:  numBytes = 1222; return SparseQR;
        case 0xc18be4b1:  numBytes = 1162; return SPQRSupport;
        case 0x54e6e25d:  numBytes = 797; return StdDeque;
        case 0xf23cb141:  numBytes = 726; return StdList;
        case 0x66a64526:  numBytes = 803; return StdVector;
        case 0x9831890b:  numBytes = 2243; return SuperLUSupport;
        case 0x00014241:  numBytes = 1629; return SVD;
        case 0x6ac119e8:  numBytes = 1382; return UmfPackSupport;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "Cholesky",
    "CholmodSupport",
    "CMakeLists_txt",
    "Core",
    "Dense",
    "Eigen",
    "Eigenvalues",
    "Geometry",
    "Householder",
    "IterativeLinearSolvers",
    "Jacobi",
    "LU",
    "MetisSupport",
    "OrderingMethods",
    "PardisoSupport",
    "PaStiXSupport",
    "QR",
    "QtAlignedMalloc",
    "Sparse",
    "SparseCholesky",
    "SparseCore",
    "SparseLU",
    "SparseQR",
    "SPQRSupport",
    "StdDeque",
    "StdList",
    "StdVector",
    "SuperLUSupport",
    "SVD",
    "UmfPackSupport"
};

const char* originalFilenames[] =
{
    "Cholesky",
    "CholmodSupport",
    "CMakeLists.txt",
    "Core",
    "Dense",
    "Eigen",
    "Eigenvalues",
    "Geometry",
    "Householder",
    "IterativeLinearSolvers",
    "Jacobi",
    "LU",
    "MetisSupport",
    "OrderingMethods",
    "PardisoSupport",
    "PaStiXSupport",
    "QR",
    "QtAlignedMalloc",
    "Sparse",
    "SparseCholesky",
    "SparseCore",
    "SparseLU",
    "SparseQR",
    "SPQRSupport",
    "StdDeque",
    "StdList",
    "StdVector",
    "SuperLUSupport",
    "SVD",
    "UmfPackSupport"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
    {
        if (namedResourceList[i] == resourceNameUTF8)
            return originalFilenames[i];
    }

    return nullptr;
}

}
